substring(int beginIndex): Devuelve una subcadena de la cadena actual, comenzando desde beginIndex hasta el final de la cadena.
String texto = "Buenos Dias";
String subcadena = texto.substring(7);
System.out.println(subcadena); // Imprime "Dias"

substring(int beginIndex, int endIndex): Devuelve una subcadena de la cadena actual, comenzando desde beginIndex hasta endIndex - 1.
String texto = "Buenas Tardes";
String subcadena = texto.substring(0, 6);
System.out.println(subcadena); // Imprime "Buenas"

split(String regex): Divide la cadena en substrings basándose en la expresión regular proporcionada como separador.
String texto = "Buenas Tardes, Gente";
String[] partes = texto.split(",");
for (String parte : partes) {
    System.out.println(parte);
}

split(String regex, int limit): Divide la cadena en substrings basándose en la expresión regular proporcionada como separador, 
y el límite especifica el número máximo de substrings a devolver.
String texto = "Buenas Tardes, Gente";
String[] partes = texto.split(",", 1);
for (String parte : partes) {
    System.out.println(parte);
}

subSequence(int beginIndex, int endIndex): Devuelve una secuencia de caracteres de esta cadena, comenzando desde beginIndex hasta endIndex - 1.
String texto = "Hello World";
CharSequence secuencia = texto.subSequence(0, 5);
System.out.println(secuencia); // Imprime "Hello"

trim(): Devuelve una copia de la cadena, eliminando los espacios en blanco iniciales y finales.
String texto = "   Hello World   ";
String resultado = texto.trim();
System.out.println(resultado); // Imprime "Hello World"

toLowerCase(): Devuelve una copia de la cadena con todos los caracteres convertidos a minúsculas.
String texto = "Hola Mundo";
String resultado = texto.toLowerCase();
System.out.println(resultado); // Imprime "hola mundo"

toUpperCase(): Devuelve una copia de la cadena con todos los caracteres convertidos a mayúsculas.
String texto = "Hola Mundo";
String resultado = texto.toUpperCase();
System.out.println(resultado); // Imprime "HOLA MUNDO"

indexOf(int ch): Devuelve la primera aparición del carácter especificado en la cadena.
String texto = "Hola Mundo";
int indice = texto.indexOf('M');
System.out.println(indice); // Imprime 5

indexOf(int ch, int fromIndex): Devuelve la primera aparición del carácter especificado en la cadena, comenzando desde fromIndex
String texto = "Hola Mundo";
int indice = texto.indexOf('o', 2);
System.out.println(indice); // Imprime 3

indexOf(String str): Devuelve la primera aparición de la subcadena especificada en la cadena.
String texto = "Hola Mundo";
int indice = texto.indexOf("Mundo");
System.out.println(indice); // Imprime 5

indexOf(String str, int fromIndex): Devuelve la primera aparición de la subcadena especificada en la cadena, comenzando desde fromIndex.
String texto = "Hola Mundo Mundo";
int indice = texto.indexOf("Mundo", 7);
System.out.println(indice); // Imprime 11

lastIndexOf(int ch): Devuelve la última aparición del carácter especificado en la cadena.
String texto = "Hola Mundo Mundo";
int indice = texto.lastIndexOf('M');
System.out.println(indice); // Imprime 11

lastIndexOf(int ch, int fromIndex): Devuelve la última aparición del carácter especificado en la cadena, buscando hacia atrás desde fromIndex.
String texto = "Hola Mundo Mundo";
int indice = texto.lastIndexOf('M', 10);
System.out.println(indice); // Imprime 5

lastIndexOf(String str): Devuelve la última aparición de la subcadena especificada en la cadena.
String texto = "Hola Mundo Mundo";
int indice = texto.lastIndexOf("Mundo");
System.out.println(indice); // Imprime 11

lastIndexOf(String str, int fromIndex): Devuelve la última aparición de la subcadena especificada en la cadena, buscando hacia atrás desde fromIndex.
String texto = "Hola Mundo Mundo";
int indice = texto.lastIndexOf("Mundo", 10);
System.out.println(indice); // Imprime 5

contains(CharSequence s): Devuelve true si la cadena contiene la secuencia de caracteres especificada.
String texto = "Hola Mundo";
boolean contiene = texto.contains("Mundo");
System.out.println(contiene); // Imprime true

replace(char oldChar, char newChar): Devuelve una nueva cadena que resulta de reemplazar todas las ocurrencias del carácter 
especificado oldChar en la cadena por el carácter especificado newChar.
String texto = "Hola Mundo";
String resultado = texto.replace('o', '0');
System.out.println(resultado); // Imprime "H0la Mund0"

replace(CharSequence target, CharSequence replacement): Devuelve una nueva cadena que resulta de reemplazar todas las ocurrencias de la secuencia 
especificada target en la cadena por la secuencia especificada replacement.
String texto = "Hola Mundo";
String resultado = texto.replace("Mundo", "World");
System.out.println(resultado); // Imprime




